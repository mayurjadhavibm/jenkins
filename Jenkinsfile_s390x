#!/usr/bin/env groovy

/*
 * This Jenkinsfile is intended to run on https://ci.jenkins.io and may fail anywhere else.
 * It makes assumptions about plugins being installed, labels mapping to nodes that can build what is needed, etc.
 */

def failFast = false

properties([
  buildDiscarder(logRotator(numToKeepStr: '50', artifactNumToKeepStr: '3')),
  disableConcurrentBuilds(abortPrevious: true)
])

def axes = [
  platforms: ['linux'],
  jdks: [11, 17, 19],
]

def builds = [:]

axes.values().combinations {
  def (platform, jdk) = it
  builds["${platform}-jdk${jdk}"] = {
    // see https://github.com/jenkins-infra/documentation/blob/master/ci.adoc#node-labels for information on what node types are available
    def agentContainerLabel = 's390x'
    //retry(conditions: [kubernetesAgent(handleNonKubernetes: true), nonresumable()], count: 2) {
      node(s390x) {
        // First stage is actually checking out the source. Since we're using Multibranch
        // currently, we can use "checkout scm".
        stage("${platform.capitalize()} - JDK ${jdk} - Checkout") {
          checkout scm
        }

        def tmpDir = pwd(tmp: true)
        def changelistF = "${tmpDir}/changelist"
        def m2repo = "${tmpDir}/m2repo"
        def session

        // Now run the actual build.
        stage("${platform.capitalize()} - s390x - JDK ${jdk} - Build / Test") {
          timeout(time: 6, unit: 'HOURS') {
            def mavenOptions = [
              '-Pdebug',
              '-Penable-jacoco',
              '--update-snapshots',
              "--batch-mode",
              "--show-version",
              "--errors", 
              "--no-transfer-progress",
              "-Dmaven.repo.local=$m2repo",
              '-Dmaven.test.failure.ignore',
              '-DforkCount=2',
              '-Dspotbugs.failOnError=false',
              '-Dcheckstyle.failOnViolation=false',
              '-Dset.changelist',
              'help:evaluate',
              '-Dexpression=changelist',
              "-Doutput=$changelistF",
              'clean',
              'install',
            ]
            realtimeJUnit(healthScaleFactor: 20.0, testResults: '*/target/surefire-reports/*.xml') {
              withEnv(["JAVA_HOME=${ tool "jdk_${jdk}_latest" }",
                      "PATH+MAVEN=${ tool "jdk_${jdk}_latest" }/bin:${tool "maven_3_latest"}/bin",
                      "MAVEN_OPTS=-Xms2g -Xmx4g -XX:+PrintCommandLineFlags -Djava.awt.headless=true",
                      "YARN_ENABLE_IMMUTABLE_INSTALLS=false"]) {                   
                  sh "mvn ${mavenOptions.join(' ')}"
              }
              //if (isUnix()) {
              //  sh 'git add . && git diff --exit-code HEAD'
              //}
            }
          }
        }

        // Once we've built, archive the artifacts and the test results.
        stage("${platform.capitalize()} - s390x - JDK ${jdk} - Publish") {
          archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/surefire-reports/*.dumpstream'
          // cli and war have been migrated to JUnit 5
          if (failFast && currentBuild.result == 'UNSTABLE') {
            error 'There were test failures; halting early'
          }
          if (platform == 'linux' && jdk == axes['jdks'][0]) {
            def folders = env.JOB_NAME.split('/')
            if (folders.length > 1) {
              discoverGitReferenceBuild(scm: folders[1])
            }
            recordCoverage(tools: [[parser: 'JACOCO', pattern: 'coverage/target/site/jacoco-aggregate/jacoco.xml']],
            sourceCodeRetention: 'MODIFIED', sourceDirectories: [[path: 'core/src/main/java']])

            echo "Recording static analysis results for '${platform.capitalize()}'"
            recordIssues(
                enabledForFailure: true,
                tools: [java()],
                filters: [excludeFile('.*Assert.java')],
                sourceCodeEncoding: 'UTF-8',
                skipBlames: true,
                trendChartType: 'TOOLS_ONLY'
                )
            recordIssues(
                enabledForFailure: true,
                tools: [javaDoc()],
                filters: [excludeFile('.*Assert.java')],
                sourceCodeEncoding: 'UTF-8',
                skipBlames: true,
                trendChartType: 'TOOLS_ONLY',
                qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
            )
            recordIssues([tool: spotBugs(pattern: '**/target/spotbugsXml.xml'),
              sourceCodeEncoding: 'UTF-8',
              skipBlames: true,
              trendChartType: 'TOOLS_ONLY',
              qualityGates: [[threshold: 1, type: 'NEW', unstable: true]]])
            recordIssues([tool: checkStyle(pattern: '**/target/checkstyle-result.xml'),
              sourceCodeEncoding: 'UTF-8',
              skipBlames: true,
              trendChartType: 'TOOLS_ONLY',
              qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]])
            recordIssues([tool: esLint(pattern: '**/target/eslint-warnings.xml'),
              sourceCodeEncoding: 'UTF-8',
              skipBlames: true,
              trendChartType: 'TOOLS_ONLY',
              qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]])
            recordIssues([tool: styleLint(pattern: '**/target/stylelint-warnings.xml'),
              sourceCodeEncoding: 'UTF-8',
              skipBlames: true,
              trendChartType: 'TOOLS_ONLY',
              qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]])
            if (failFast && currentBuild.result == 'UNSTABLE') {
              error 'Static analysis quality gates not passed; halting early'
            }
            def changelist = readFile(changelistF)
            dir(m2repo) {
              archiveArtifacts(
                  artifacts: "**/*$changelist/*$changelist*",
                  excludes: '**/*.lastUpdated,**/jenkins-coverage*/,**/jenkins-test*/',
                  allowEmptyArchive: true, // in case we forgot to reincrementalify
                  fingerprint: true
                  )
            }
          }
        }
      }
    //}
  }
}

builds.failFast = failFast
parallel builds
